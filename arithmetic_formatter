import re

"""arithmetic_arranger(["32 + 8", "1 - 3801", "9999 + 9999", "523 - 49"], True)

      32         1      9999      523
    +  8    - 3801    + 9999    -  49
    ----    ------    ------    -----
      40     -3800     19998      474 """
    
    
class c_operation:
    def calc(self, num_list,result):
        self.result = result
        self.num_list = num_list
        self.split_list = list()
        self.oper = str()
        self.largest = None  #Number with more digits
        pos0 = str()
        pos1 = str()
        pos2 = str()
        pos3 = str()
        pos4 = str()
        sol =  str()
        self.dash = None
<<<<<<< Updated upstream
        self.boil = '{}\n{}{}\n{}\n{}'        
=======
        self.boil = '{}\n{}\n{}{}\n{}\n'        
>>>>>>> Stashed changes
        for i in range(len(self.num_list)):
            self.split_list = self.num_list[i]
            #Comparing numbers length
            if len(self.split_list[0]) > len(self.split_list[2]):
<<<<<<< Updated upstream
                self.largest = self.split_list[0]
            else:
                self.largest = self.split_list[2]    
            self.dash = len(self.largest) + 2 #Add 2 for the sign and the space
            if (self.result == True):
                if ('+' in self.split_list):
                    pos4 = pos4 + str(int(self.split_list[0]) + int(self.split_list[2])) + '    '
                else:
                    pos4 = pos4 + str(int(self.split_list[0]) - int(self.split_list[2])) + '    '
            else:
               pos4 = ''
            pos0 = pos0 + self.split_list[0] + '    ' 
            pos1 = pos1 + self.split_list[1] + ' ' + self.split_list[2] + '    '
            pos3 = pos3 + ('_' * self.dash) + '    '
=======
                self.largest = len(self.split_list[0])
            else:
                self.largest = len(self.split_list[2])    
            self.dash = self.largest + 2 #Add 2 for the sign and the space
            if (self.result == True):
                if ('+' in self.split_list):
                    pos4 = pos4 + str(int(self.split_list[0]) + int(self.split_list[2]))
                else:
                    pos4 = pos4 + str(int(self.split_list[0]) - int(self.split_list[2]))
            else:
               pos4 = ''
            pos0 = pos0 + str(self.split_list[0]).rjust(self.dash) + '    '
            pos1 = pos1 + str(self.split_list[1]) + ' ' + str(self.split_list[2]).rjust(self.largest) + '    '
            pos3 = pos3 + ('_' * self.dash) + '    '
            pos4 = pos4.rjust(self.dash) + '     '
>>>>>>> Stashed changes
        sol = self.boil.format(pos0,pos1,pos2,pos3,pos4)
        return(sol)
            
        
      
        

def arithmetic_arranger(problems, result = False):
    

   #Couting digits 
   def length_number(problems):
       valid = True
       for i in range(len(problems)):
           leng = problems[i]
           num_list = re.split("\s", leng)
           if (len(num_list[0]) > 4 or len(num_list[2]) > 4):
               valid = False
               break
       return(valid)     
   #Search for * or /  
   def valid_operands(problems):
       valid = True
       for i in range(len(problems)):
        oper = problems[i]
        if ('*' in oper or '/' in oper):
            valid = False
            break
       return(valid) 

        
   #Is a digit?
   def is_number(problems):
       is_digit = True
       for i in range(len(problems)):
           just_digits = problems[i]
           digits_list = re.split("\s", just_digits)
           if (digits_list[0].isdigit() == False):
               is_digit = False
               break
           elif (digits_list[2].isdigit() == False):
               is_digit = False
               break
       return(is_digit)    
            
   
   def problem_list(problems):
        dlist = list() 
        for i in range(len(problems)):
            digs = problems[i]
            digs_list = re.split("\s", digs)
            dlist.append(digs_list)
        
        return(dlist)
        
   #Selector
   if (len(problems) > 5):
       arranged_problems = "Error: Too many problems."
   elif (valid_operands(problems)== False):
       arranged_problems = "Error: Operator must be '+' or '-'." 
   elif (length_number(problems) == False):
       arranged_problems = "Error: Numbers cannot be more than four digits."       
   elif (is_number(problems) == False):
       arranged_problems = "Error: Numbers must only contain digits." 
    
   else:
        num_list = problem_list(problems)
        #Object
        operation = c_operation()
        arranged_problems =   operation.calc(num_list, result) 
           
            
   
   return arranged_problems

print(arithmetic_arranger(["32 + 8", "1 - 3801", "9999 + 9999", "523 - 49"], True))    

